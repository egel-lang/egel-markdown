#!/bin/env egel

import "prelude.eg"
import "dictionary.eg"

namespace Markdown (
    def split_while =
        [P {} -> ({},{})
        |P {X|XX} -> if P X then let (XX,YY) = split_while P XX in ({X|XX},YY) else ({}, {X|XX})]

    def split_lines = Regex::split (Regex::compile "\n")
)

namespace Markdown (
    using System

    val script   = ref ""
    val markdown = ref ""
    val output   = ref ""

    def set_script   = set_ref script
    def set_markdown = set_ref markdown
    def set_output   = set_ref output

    def get_script   = get_ref script
    def get_markdown = get_ref markdown
    def get_output   = get_ref output

)

namespace Markdown (
    using System
    using List

    val keyword_egel    = ".egel"
    val keyword_import  = ".import"
    val keyword_using   = ".using"
    val keyword_data    = ".data"
    val keyword_def     = ".def"
    val keyword_val     = ".val"
    val keyword_hook    = ".hook"

    val keywords =
        {keyword_egel, keyword_import, keyword_using, keyword_data, keyword_def, keyword_val, keyword_hook}

    def substitute =
        [T0 T1 T2 -> String::remove 0 (String::count T0) T2 |> [T -> T1 + T]]

    val hook_counter = ref 0

    def hook_command =
        let N = get_ref hook_counter in set_ref hook_counter (N + 1);
        " val add_hook_" + (to_text N) + " = Markdown::add_hook "
    
    def keyword_substitute =
        [L -> 
            if String::starts_with keyword_egel L 
            then substitute keyword_egel "     " L
            else if String::starts_with keyword_hook L 
            then substitute keyword_hook hook_command L
            else substitute "." " " L ]
            
    def process_keyword =
        [{L|LL} ->
            let L = keyword_substitute L in
            let (LL0, LL1) = split_while [L -> or (String::starts_with " " L) (String::starts_with "\t" L)] LL in
            let (LL1, LL2) = process LL1 in
                ({L|LL0++LL1}, LL2) ]

    def process =
        [{}     -> ({}, {})
        |{L|LL} -> 
            if any [K -> String::starts_with K L] keywords
            then process_keyword {L|LL}
            else let (LL0, LL1) = process LL in ({""|LL0}, {L|LL1})]
)

namespace Markdown (
    using System
    using List

    def eval_split1 =
        [{} -> throw "error in sub" | {X} -> throw "error in sub"
        |{'}','}'|XX} -> eval_split0 XX |> [XX -> {{}|XX}]
        |{X|XX} -> eval_split1 XX |> [{Y|YY} -> {{X|Y}|YY} ] ] 

    def eval_split0 =
        [ {} -> {{}} 
        | {'{','{'|XX} -> eval_split1 XX |> [XX -> {{}|XX}]
        | {X|XX} -> eval_split0 XX |> [{Y|YY} -> {{X|Y}|YY}]]

    def eval_split = do String::to_chars |> eval_split0 |> map String::from_chars

    def eval_subs =
        [{} -> "" |{X} -> X
        |{X, Y|XX} -> X + (eval Y |> to_text) + eval_subs XX]

    def eval_substitution = do eval_split |> eval_subs

    def eval_hook = map eval_substitution 
)

namespace Markdown (
    using System
    using List

    val hooks = ref {eval_hook}

    def get_hooks = get_ref hooks

    def add_hook = [F -> set_ref hooks {F|get_hooks}]

    def normalize = concat_map split_lines

    def apply_hooks = [{} LL -> LL | {F|FF} LL -> apply_hooks FF LL |> F |> normalize]

    def run_hooks = apply_hooks get_hooks
)

namespace Markdown (
    using System
    using List

    def lines_to_text =
        [ {} -> "" | {L|LL} -> L + "\n" + lines_to_text LL ]

    def read_file = 
        [FN ->
            if OS::exists FN then OS::read_all (OS::open_in FN) |> split_lines
            else throw "File not found: " + FN ]

    def process_file =
        [ LL -> let (LL0, LL1) = process LL in 
                    set_script (lines_to_text (LL0 ++ {"none"})); 
                    set_markdown LL1 ]

    def run_script =
        [FN ->
            read_file FN |> process_file;
            eval get_script;
            run_hooks get_markdown |> lines_to_text |> set_output;
            print get_output ] 

    def run_debug =
        [FN ->
            read_file FN |> process_file;
            print "script:\n" get_script "\n";
            print "markdown:\n" get_markdown "\n";
            eval get_script;
            print "hooks:\n" get_hooks "\n";
            run_hooks get_markdown |> lines_to_text |> set_output;
            print get_output ] 
)

def main = 
    [ {_,_,FN} -> Markdown::run_script FN
    | {_,_,"--debug",FN} -> Markdown::run_debug FN
    | _ -> System::print "usage: emd [--debug] filename.emd\n"] System::args

namespace Table (
    using System
    using List 

    def widths =
        do transpose |> map (map String::count) |> map maximum |> map ((+) 2)

    def info =
        [(FF, TT) -> widths TT |> [WW -> (zip FF WW, TT)]]

    def render_line =
        do map [((F,W),T) ->
                 format (" {:" + (String::from_chars {F}) + (to_text (W - 2)) + "} ") T] 
            |> reduce [W0 W1 -> W0 + "|" + W1] |> [T -> "    |" + T + "|"]

    def render =
        [(FF, TT) -> map (zip FF) TT |> map render_line |> reduce [T0 T1 -> T0 + "\n" +T1]]

    def hline =
        do map [(F, W) -> String::from_chars (repeat W '-')] |> reduce [T0 T1 -> T0 + "+" + T1] |> [T -> "    |" + T + "|"]

    def hrender =
        [(FF, TT) -> map (zip FF) TT |> map render_line |> [{X|XX} -> {X, hline FF|XX}] |> reduce [T0 T1 -> T0 + "\n" +T1]]

    def args0 =
        [FF TT -> (String::to_chars FF, map (map to_text) TT) 
        |TT -> (map [_ -> '^'] (head TT), (map (map to_text) TT))]

    def table = napp (do info |> render) args0

    def htable = napp (do info |> hrender) args0
)

def table = Table::table
def htable = Table::htable

namespace References (
    using System
    using List

    val refdb = Dict::dict

    def add_reference =
        [T B -> (Dict::size refdb + 1) |> [K -> Dict::set refdb T (K,B)]]

    def db_reference =
        [K -> Dict::get refdb K |> fst |> [S -> "[" + to_text S + "]"]]

    def references =
        Dict::values refdb |> sort 
        |> map [(K,B) -> (format " {:>4} " ("[" + (to_text K) + "]")) + B]
        |> reduce [T0 T1 -> T0 + "\n" + T1]

    def refs_debug =
        print "debug: " (Dict::to_list refdb) "\n"
)

def add_reference = References::add_reference
def reference = References::db_reference
def references = References::references

namespace Format (
    using System
    using List

    val white_space = Regex::compile "[ \\t]+"
    val box_start = Regex::compile " *([\\+\\*]|\\[[^ ]*|[0-9]+[^ ]*) +"

    data br, pre, line, box

    def spaces =
        [N -> String::from_chars (repeat N ' ') ]

    def adjust =
        [H {X|XX} -> 
            let W = Regex::look_match white_space X in
            let N = String::count W in
            let X = spaces (N - 4) + System::format "{:>3} " H +(String::remove 0 N X) in
            {X|XX}]

    def smaller =
        [N {} -> 0
        |N {W|WW} -> let N = N - (String::count W + 1) in if N < 0 then 0 else 1 + smaller N WW]

    def render_paragraph =
        [I {} -> {}
        |I WW -> 
            let N = smaller 70 {I|WW} in 
            let (WW0,WW1) = split_at N WW in
            {I + (String::trim (reduce [W0 W1 -> W0 + " " + W1] WW0))|render_paragraph I WW1} ]

    def render =
        [I {} -> {}
        |I {br|XX} -> {""|render I XX}
        |I {(pre L)|XX} -> {I + L|render I XX}
        |I {(line L)|XX} -> 
            let (LL, XX) = span [(line _) -> true | _ -> false] {line L|XX} in
            let L = map [(line L) -> L] LL |> reduce [L0 L1 -> L0 + " " + L1] in
            let LL = Regex::split white_space L in
                render_paragraph I LL ++ render I XX
        |I {(box H LL)|XX} ->
            adjust H (render (I + "    ") LL) ++ render I XX ]

    def gather =
        [{} -> {}
        |{X|XX} ->
            if X == "" then {br|gather XX}
            else if Regex::match white_space X then {br|gather XX}
            else if String::starts_with "#" X then {pre X|gather XX}
            else if String::starts_with "    " X then {pre X|gather XX}
            else if Regex::look_at box_start X then
                let B = Regex::look_match box_start X in
                let N = String::count B in
                let S = String::from_chars (repeat N ' ') in
                let X = Regex::replace box_start S X in
                let (BB,XX) = span [X -> String::starts_with S X] {X|XX} in
                    {box (String::trim B) (gather (map (String::remove 0 N) BB))|gather XX} 
            else {line X|gather XX}]

    def format0 = do gather |> render ""

)

val add_format_hook = Markdown::add_hook Format::format0

