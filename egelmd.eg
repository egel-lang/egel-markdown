#!/bin/env egel

import "prelude.eg"
import "os.ego"
import "fs.ego"
import "regex.ego"

namespace Markdown (
    def split_while =
        [P {} -> ({},{})
        |P {X|XX} -> if P X then let (XX,YY) = split_while P XX in ({X|XX},YY) else ({}, {X|XX})]

    def split_lines = Regex::split (Regex::compile "\n")
)

namespace Markdown (
    using System

    val script   = ref ""
    val markdown = ref ""
    val output   = ref ""

    def set_script   = [T -> set_ref script T]
    def set_markdown = [T -> set_ref markdown T]
    def set_output   = [T -> set_ref output T]

    def get_script   = get_ref script
    def get_markdown = get_ref markdown
    def get_output   = get_ref output

)

namespace Markdown (
    using System
    using List

    val keyword_egel    = ".egel"
    val keyword_import  = ".import"
    val keyword_using   = ".using"
    val keyword_data    = ".data"
    val keyword_def     = ".def"
    val keyword_val     = ".val"
    val keyword_hook    = ".hook"

    val keywords =
        {keyword_egel, keyword_import, keyword_using, keyword_data, keyword_def, keyword_val, keyword_hook}

    def substitute =
        [T0 T1 T2 -> String::remove 0 (String::count T0) T2 |> [T -> T1 + T]]

    val hook_counter = ref 0

    def hook_command =
        let N = get_ref hook_counter in set_ref hook_counter (N + 1);
        " val add_hook_" + (to_text N) + " = Markdown::add_hook "
    
    def keyword_substitute =
        [L -> 
            if String::starts_with keyword_egel L 
            then substitute keyword_egel "     " L
            else if String::starts_with keyword_hook L 
            then substitute keyword_hook hook_command L
            else substitute "." " " L ]
            
    def process_keyword =
        [{L|LL} ->
            let L = keyword_substitute L in
            let (LL0, LL1) = split_while [L -> or (String::starts_with " " L) (String::starts_with "\t" L)] LL in
            let (LL1, LL2) = process LL1 in
                ({L|LL0++LL1}, LL2) ]

    def process =
        [{}     -> ({}, {})
        |{L|LL} -> 
            if any [K -> String::starts_with K L] keywords
            then process_keyword {L|LL}
            else let (LL0, LL1) = process LL in ({""|LL0}, {L|LL1})]
)

namespace Markdown (
    using System
    using List

    def eval_split1 =
        [{} -> throw "error in sub" | {X} -> throw "error in sub"
        |{'}','}'|XX} -> eval_split0 XX |> [XX -> {{}|XX}]
        |{X|XX} -> eval_split1 XX |> [{Y|YY} -> {{X|Y}|YY} ] ] 

    def eval_split0 =
        [ {} -> {{}} 
        | {'{','{'|XX} -> eval_split1 XX |> [XX -> {{}|XX}]
        | {X|XX} -> eval_split0 XX |> [{Y|YY} -> {{X|Y}|YY}]]

    def eval_split = do String::to_chars |> eval_split0 |> map String::from_chars

    def eval_do =
        [{} -> "" |{X} -> X
        |{X, Y|XX} -> X + (eval Y |> to_text) + eval_do XX]

    def eval_substitution = do eval_split |> eval_do

    def eval_hook = map eval_substitution 
)

namespace Markdown (
    using System
    using List

    val hooks = ref {eval_hook}

    def get_hooks = get_ref hooks

    def add_hook = [F -> set_ref hooks {F|get_hooks}]

    def normalize = concat_map split_lines

    def apply_hooks = [{} LL -> LL | {F|FF} LL -> apply_hooks FF LL |> F |> normalize]

    def run_hooks = apply_hooks get_hooks
)

namespace Markdown (
    using System
    using List

    def lines_to_text =
        [ {} -> "" | {L|LL} -> L + "\n" + lines_to_text LL ]

    def read_file = 
        [FN ->
            if OS::exists FN then OS::read_all (OS::open_in FN) |> split_lines
            else throw "File not found: " + FN ]

    def process_file =
        [ LL -> let (LL0, LL1) = process LL in 
                    set_script (lines_to_text (LL0 ++ {"none"})); 
                    set_markdown LL1 ]

    def run_script =
        [FN ->
            read_file FN |> process_file;
            eval get_script;
            run_hooks get_markdown |> lines_to_text |> set_output;
            print get_output ] 

    def run_debug =
        [FN ->
            read_file FN |> process_file;
            print "script:\n" get_script "\n";
            print "markdown:\n" get_markdown "\n";
            eval get_script;
            print "hooks:\n" get_hooks "\n";
            run_hooks get_markdown |> lines_to_text |> set_output;
            print get_output ] 
)

def main = 
    [ {_,_,FN} -> Markdown::run_script FN
    | {_,_,"--debug",FN} -> Markdown::run_debug FN
    | _ -> System::print "usage: egelmd [--debug] filename.md\n"] System::args
